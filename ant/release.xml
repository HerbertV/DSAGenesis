<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- 
	ANT BUILDER
 -->
<project default="process" 
		name="DSA Genesis release"
	>
    <description>
    	packs a release archive and uploads the update files.
    </description>
	
<!--
	=========================================================================== 
		Public Properties
	===========================================================================
	change it within the props file
-->
	<loadproperties srcfile="DSAGenesis/ant/build.properties"/>
	<loadproperties srcfile="${dir.ant}buildproject.num"/>
	
<!--
	=========================================================================== 
		TASK DEFINITIONS
	===========================================================================
-->
	<!-- add ant-contrib lib -->
	<!-- http://ant-contrib.sourceforge.net/ -->
	<!-- Version 1.0b3 -->
	<taskdef resource="net/sf/antcontrib/antlib.xml">
		<classpath>
			<pathelement location="${dir.ant}ant-contrib/ant-contrib-1.0b3.jar"/>
		</classpath>
	</taskdef>
		
	<!-- define xmltask lib -->
	<!-- http://www.oopsconsultancy.com/software/xmltask/index.html -->
	<taskdef name="xmltask" classname="com.oopsconsultancy.xmltask.ant.XmlTask"/>
		
<!-- 
	===========================================================================
		Private Properties
	===========================================================================
	Do not touch!
	At least until you know what you are doing ;)
 -->
	<!-- timestamp for release -->
	<tstamp>
		<format property="tsNow" pattern="yyyy-MM-dd HH:mm:ss"/>
	</tstamp>
	
	<tstamp>
		<format property="tsYear" pattern="yyyy"/>
	</tstamp>	

	
<!-- 
	===========================================================================
		Target init_properties
	===========================================================================
 -->
	
	<target name="init_properties" 
			description="initializes the remaining properties.">
		
		<!-- needs to be done since the auto increment from buildfx already updated the number for the next build -->
		<math result="lastbuild.number" operand1="${build.number}" operation="-" operand2="1" datatype="int"/>
		<loadproperties srcfile="${dir.ant}release.properties"/>
		<property name="patchpath" value="${jappdater.patch.remote.dir}${project.version.num}-b${lastbuild.number}/"/>						

	</target>
	
<!-- 
	===========================================================================
		Target copy_data
	===========================================================================
 -->
	<target name="copy_data"
			description="copies data files">
		
		<delete dir="${dir.build}data"/>
		<mkdir dir="${dir.build}data"/>
		
		<!-- 
			We need only copy the db, xml files and properties.
			Js Scripts are included into the jar (see buildJavaFX.xml) .	
		-->
		<copy todir="${dir.build}data" 
				verbose="true" 
				includeEmptyDirs="true" 
				preservelastmodified="true"
			>
			<fileset dir="${dir.src}data">
				<or>
					<filename name="**/*.xml"/>
					<filename name="**/*.s3db"/>
					<filename name="**/*.properties"/>
				</or>
			</fileset>		
		</copy>
	</target>	


<!-- 
	===========================================================================
		Target create_index
	===========================================================================
 -->	
	<target name="create_index"
			description="creates a new index.xml for jappdater">
		
		<delete file="${dir.build}data/jappdater/index.xml"/>
		<!-- create the base -->
		<echoxml file="${dir.build}data/jappdater/index.xml">
			<JAppDater version="1.0.0">
				
				<application index="/index.xml" 
						name="DSA Genesis" 
						server="${jappdater.download.server}"
						version="${project.version.num}-b${lastbuild.number}"/>
				
				<files>
					<file ID="1" dest="./${project.name.short}.jar" 
							src="${patchpath}${project.name.short}.jar" 
							version="${project.version.num}-b${lastbuild.number}"/>
					<file ID="2" dest="./${project.name.short}.exe" 
							src="${patchpath}${project.name.short}.exe" 
							version="${project.version.num}-b${lastbuild.number}"/>
					<file ID="3" dest="./${project.name.short}.jar.MD5" 
							src="${patchpath}${project.name.short}.jar.MD5" 
							version="${project.version.num}-b${lastbuild.number}"/>
					<file ID="4" dest="./Changelog.txt" 
							src="${patchpath}Changelog.txt" 
							version="${project.version.num}-b${lastbuild.number}"/>
					<file ID="5" dest="./Readme.txt" 
							src="${patchpath}Readme.txt" 
							version="${project.version.num}-b${lastbuild.number}"/>
				</files>
			</JAppDater>
		</echoxml>
		
		<!-- add remaining files -->
		<var name="iFileCounter" value="5" />
		
		<for param="currentFileForIndex">
			<path>
				<fileset dir="${dir.build}" casesensitive="yes">
					<include name="**/*"/>
					<exclude name="Changelog.txt"/>
					<exclude name="Readme.txt"/>
					<exclude name="*.exe"/>
					<exclude name="*.BAT"/>
					<exclude name="*.MD5"/>
					<exclude name="DSAGenesis.jar"/>
					<exclude name="*.log"/>
					<!-- this is done sepparate -->
					<exclude name="**/jappdater/index.xml"/>
				</fileset>
			</path>
			<sequential>
				<local name="relativefilepath" />
				<local name="fileChecksum" />
							
				<pathconvert targetos="unix" property="relativefilepath">
					<fileset file="@{currentFileForIndex}" />
					<map from="${dir.build}" to="" />
				</pathconvert>
				
				<math result="iFileCounter" operand1="${iFileCounter}" operation="+" operand2="1" datatype="int"/>
				<checksum property="fileChecksum" file="@{currentFileForIndex}"/>
				
				<xmltask source="${dir.build}data/jappdater/index.xml" dest="${dir.build}data/jappdater/index.xml">
					<insert path="JAppDater/files">
					<![CDATA[ 
						<file ID="${iFileCounter}" 
								dest="./${relativefilepath}" 
								src="${patchpath}${relativefilepath}" 
								checksum="${fileChecksum}"/>
					]]>
					</insert> 
				</xmltask>
				
			</sequential>
		</for>
		       
		
		<!-- validate -->
		<xmlvalidate file="${dir.build}data/jappdater/index.xml" 
				lenient="false"
				failonerror="true" 
				warn="true"
			>
			<attribute name="http://apache.org/xml/features/validation/schema" value="true"/>
			<property name="http://apache.org/xml/properties/schema/external-noNamespaceSchemaLocation"
					value="http://xsd.veitengruber.com/jappdater.xsd"
				/>
		</xmlvalidate>
		
		<!--
		add schema reference
		Since <echoxml> can not handle xsi:noNamespaceSchemaLocation we do this here.
		-->
		<xmltask source="${dir.build}data/jappdater/index.xml" dest="${dir.build}data/jappdater/index.xml">
			<attr path="JAppDater" attr="xmlns:xsi" value="http://www.w3.org/2001/XMLSchema-instance"/>
			<attr path="JAppDater" attr="xsi:noNamespaceSchemaLocation" value="http://xsd.veitengruber.com/jappdater.xsd"/>
		</xmltask>
			
	</target>

<!-- 
	===========================================================================
		Target create_download_snippet
	===========================================================================
 -->	
	<target name="create_download_snippet" 
			description="creates a html snippet for the webpage that is injected with ajax.">
		
		<copy file="${dir.ant}snippets/dsag_download_page.html"
				tofile="${release.dir}dsagenesis_downloads.html"
			/>
		<!-- version -->
		<replaceregexp file="${release.dir}dsagenesis_downloads.html"
				match="@VERSION(.*)"
				replace="${project.version.num}-b${lastbuild.number}\1"
				byline="true"
			/>
		
		<!-- changlog -->
		<loadfile property="cl.lastchanges" srcFile="${dir.ant}lastchanges.txt"/>
		<replaceregexp file="${release.dir}dsagenesis_downloads.html"
				match="@LASTCHANGES(.*)"
				replace="Last Changes:${line.separator}${cl.lastchanges}\1"
				byline="true"
			/>
		<replaceregexp file="${release.dir}dsagenesis_downloads.html"
				match="@CHANGELOGLINK(.*)"
				replace="${jappdater.download.server}/${patchpath}Changelog.txt\1"
				byline="true"
			/>
		
		<!-- package size trunc to 3 decimals -->
		<length file="${release.dir}${release.archive}" property="archive.bytes" />
		<math result="archive.mb">
			<op op="/" datatype="float">	
				<op op="*" datatype="int">
					<op op="*" datatype="float">
						<op op="/" datatype="float">
							<num value="${archive.bytes}" datatype="float"/>
							<num value="1048576" datatype="float"/>
						</op>
						<num value="1000" datatype="float"/>
					</op>
					<num value="1"/>
				</op>
				<num value="1000"/>
			</op>
		</math>
		
		<replaceregexp file="${release.dir}dsagenesis_downloads.html"
				match="@PACKAGESIZE(.*)"
				replace="${archive.mb} MB\1"
				byline="true"
			/>
		
		<!-- download -->
		<replaceregexp file="${release.dir}dsagenesis_downloads.html"
				match="@DOWNLOADLINK(.*)"
				replace="${jappdater.download.server}/${release.archive}\1"
				byline="true"
			/>
				
		<!-- date -->
		<replaceregexp file="${release.dir}dsagenesis_downloads.html"
				match="@BULDDATE(.*)"
				replace="${tsNow}\1"
				byline="true"
			/>
		
		<!-- checksum -->
		<checksum file="${release.dir}/${release.archive}" property="archive.md5" />
		<replaceregexp file="${release.dir}dsagenesis_downloads.html"
				match="@CHECKSUM(.*)"
				replace="${archive.md5}\1"
				byline="true"
			/>
	</target>
	
	
<!-- 
	===========================================================================
		Target upload
	===========================================================================
 -->			
	<target name="upload" 
			description="Uploads patch files and archive of the release to the server.">
		
		<echo message="Uploading Zip ..."/>
		<echo message="--> ${jappdater.root.dir}" />
						
		<ftp server="${jappdater.upload.server}"
				preservelastmodified="true"
				passive="true"
				depends="yes"
				userid="${jappdater.upload.user}"
				password="${jappdater.upload.pwd}"
				remotedir="${jappdater.root.dir}"
				verbose="true"
			>
			<fileset file="${release.dir}/${release.archive}" />
		</ftp>
		
		<fileset dir="${release.dir}${patchpath}" casesensitive="yes" id="filesForPatch" >
			<!-- this is done sepparate -->
			<exclude name="**/jappdater/index.xml"/>
		</fileset>
		<echo message="Preparing folders --> ${jappdater.root.dir}${patchpath} ..." />
		
		<!-- prepare all needed dirs -->	
		<for param="currentDirToMake">
			<path>
				<fileset refid="filesForPatch" />
			</path>
			<sequential>
				<local name="dirPath" />
				<local name="shortendDir" />
				<local name="shortendDirUnix" />
				
				<!-- most tricky part: extract the pathes we need to make -->
				<dirname property="dirPath" file="@{currentDirToMake}" />
				<property basedir="${release.dir}" name="shortendDir" value="${dirPath}" relative="yes" />
				<propertyregex property="shortendDirUnix"
				              input="${shortendDir}"
				              regexp="\\"
				              replace="/"
				              global="true"
				              defaultValue="${shortendDir}" />
				
				<ftp server="${jappdater.upload.server}"
						action="mkdir"	
						passive="true"
						userid="${jappdater.upload.user}"
						password="${jappdater.upload.pwd}"
						remotedir="${jappdater.root.dir}/${shortendDirUnix}"
					/>
				
			</sequential>
		</for>
		
		<echo message="Uploading Patch files ..."/>
					
		<ftp server="${jappdater.upload.server}"
				preservelastmodified="true"
				passive="true"
				depends="yes"
				userid="${jappdater.upload.user}"
				password="${jappdater.upload.pwd}"
				remotedir="${jappdater.root.dir}${patchpath}"
				verbose="true"
			>
			<fileset refid="filesForPatch" />
		</ftp>
		
		<echo message="Uploading Page Snippet ..."/>
		
		<ftp server="${jappdater.upload.server}"
				userid="${jappdater.upload.user}"
				password="${jappdater.upload.pwd}"
				remotedir="${jappdater.snippet.dir}"
				verbose="true"
			>
			<fileset file="${release.dir}dsagenesis_downloads.html" />
		</ftp>
		
		<echo message="Uploading update index ..."/>
				
		<ftp server="${jappdater.upload.server}"
				userid="${jappdater.upload.user}"
				password="${jappdater.upload.pwd}"
				remotedir="${jappdater.root.dir}"
				verbose="true"
			>
			<fileset file="${release.dir}${patchpath}data/jappdater/index.xml" />
		</ftp>
				
		<echo message="Upload finished."/>
	</target>
			
	
<!--
	=========================================================================== 
		DEFAULT Target BUILD
	===========================================================================
 -->	
	<target name="process"
			depends="init_properties,copy_data,create_index"
		>
		<echo message="DSA Genesis release ... "/>
		<echo message="${ant.version}"/>
		<echo message="${tsNow}"/>
		<echo>
		</echo>
		<echo message="Project Version: ${project.version.num}"/>
		<echo>
		</echo>
				
		<!-- delete previous release -->
		<delete includeemptydirs="true">
			<fileset dir="${release.dir}" includes="**/*"/>
		</delete>
		
		<zip basedir="${dir.build}" destfile="${release.dir}${release.archive}" />
		
		<antcall target="create_download_snippet" />
		
		<!-- copy everything into release folder -->
		<copy preservelastmodified="true" 
				todir="${release.dir}${patchpath}"
			>
			<fileset dir="${dir.build}"/>
		</copy>	
		
		<!-- just for dry runs -->
		<input message="Upload to Server? (y/default n)" addProperty="arg.uploadToServer"/>
		<if>
			<equals arg1="${arg.uploadToServer}" arg2="y"/>
			<then>
				<antcall target="upload" />
			</then>
		</if>
		<echo message="Done."/>
		
	</target>

</project>
