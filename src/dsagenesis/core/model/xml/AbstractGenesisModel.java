/*
 *  ___  ___   _      ___                 _    
 * |   \/ __| /_\    / __|___ _ _  ___ __(_)___
 * | |) \__ \/ _ \  | (_ / -_) ' \/ -_|_-< (_-<
 * |___/|___/_/ \_\  \___\___|_||_\___/__/_/__/
 *
 * -----------------------------------------------------------------------------
 * @author: Herbert Veitengruber 
 * @version: 1.0.0
 * -----------------------------------------------------------------------------
 *
 * Copyright (c) 2013 Herbert Veitengruber 
 *
 * Licensed under the MIT license:
 * http://www.opensource.org/licenses/mit-license.php
 */
package dsagenesis.core.model.xml;

import java.sql.ResultSet;
import java.sql.SQLException;

import org.w3c.dom.Element;

import dsagenesis.core.model.sql.AbstractSQLTableModel;

/**
 * AbstractGenesisModel.
 * 
 * Abstract base class for all Genesis model classes.
 * used by Meta Data editor and Hero Editor.
 * 
 * All implementations represent a single xml entry or db row.
 * So the Names of these classes are singular.
 */
public abstract class AbstractGenesisModel
{
	// ============================================================================
	//  Variables
	// ============================================================================
		
	/**
	 * The database ID.
	 * 
	 * @see TableHelper
	 */
	protected String id;
	
	/**
	 * The name.
	 */
	protected String name;
	
	/**
	 * reference to the table model
	 */
	protected AbstractSQLTableModel sqlModel;
	
	
	// ============================================================================
	//  Constructors
	// ============================================================================
		
	/**
	 * Constructor 1.
	 * 
	 * for creating the model from the database 
	 * java.sql.ResultSet.
	 * used by getRow from AbstractSQLTableModel
	 * 
	 * @param rs
	 * @param model
	 * 
	 * @throws SQLException 
	 */
	public AbstractGenesisModel( 
			ResultSet rs, 
			AbstractSQLTableModel model 
		) 
			throws SQLException
	{
		this.sqlModel = model;
		
		this.id = rs.getString("ID");
		this.name = rs.getString(model.getPrefix()+"name");
		// rest must be set in the extending class.
	}
	
	/**
	 * Constructor 2.
	 * 
	 * for creating the model from its XML
	 * org.w3c.dom.Element.
	 * 
	 * @param ele
	 */
	public AbstractGenesisModel( Element ele )
	{
		this.id = ele.getAttribute("ID");
		
		updateFromDB();
	}
	
	
	// ============================================================================
	//  Functions
	// ============================================================================
		
	/**
	 * getID
	 * 
	 * each object has an ID.
	 * The ID comes from the DB and is stored in Meta Data or Hero Data.
	 *
	 * the ID is generated by an prefix and an numeric value or unique string.
	 * @see dsagenesis.core.sqlite.TableHelper
	 *  
	 * @return
	 */
	public String getID()
	{
		return this.id;
	}
		
	/**
	 * returns the raw name from the DB
	 * @return
	 */
	public String getName()
	{
		return this.name;
	}
		
	/**
	 * if a model has a sub selection that is also shown as name 
	 * appendix this function combines the names to a compiled name.
	 * in this case override the function.
	 * 
	 * if there is no sub selection compiled name is the same
	 * as the name. 
	 * 
	 * It is recommend to use this function in Hero or Meta Editor
	 * and getName for the Core Editor.
	 * 
	 * @return
	 */
	public String getCompiledName()
	{
		return this.name;
	}
	
	/**
	 * getSQLModel
	 * 
	 * @return
	 */
	public AbstractSQLTableModel getSQLModel()
	{
		return this.sqlModel;
	}
	
	/**
	 * setSQLModel
	 * 
	 * @param model
	 */
	public void setSQLModel(AbstractSQLTableModel model)
	{
		this.sqlModel = model;
	}
	
	/**
	 * updateFromDB
	 *
	 * fills the missing variables with the DB values.
	 */
	public abstract void updateFromDB();
	
	/**
	 * getXMLElement
	 * 
	 * returns the model as xml element.
	 * 
	 * @return
	 */
	public abstract Element getXMLElement();
	
}
